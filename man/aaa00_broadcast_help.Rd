% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa00_broadcast_help.R
\name{aaa00_broadcast_help}
\alias{aaa00_broadcast_help}
\alias{broadcast-package}
\alias{broadcast}
\alias{broadcast_help}
\title{broadcast Package Overview}
\description{
broadcast: \cr
Broadcasted Array Operations Like 'NumPy' \cr \cr

Implements efficient 'NumPy'-like broadcasted operations for atomic and recursive arrays.

In the context of operations involving 2 (or more) arrays, “broadcasting” refers to efficiently recycling array dimensions without allocating additional memory.

Besides linking to 'Rcpp', 'broadcast' does not use any external libraries in any way;
'broadcast' was essentially made from scratch and can be installed out-of-the-box.

The implementations available in 'broadcast' include, but are not limited to, the following:
\enumerate{
\item Broadcasted element-wise operations on any 2 arrays;
they support a large set of
relational, arithmetic, Boolean, string, and bit-wise operations.
\item A faster, more memory efficient, and broadcasted abind-like function, for binding arrays along an arbitrary dimension.
\item Broadcasted ifelse-like, and apply-like functions.
\item Casting functions, that cast subset-groups of an array to a new dimension, cast nested lists to dimensional lists, and vice-versa.
\item A few linear algebra functions for statistics.
}

The functions in the 'broadcast' package strive to minimize computation time and memory usage (which is not just better for efficient computing, but also for the environment).\cr \cr
}
\section{Links to Get Started}{

\itemize{
\item The Quick-Start Guide, Vignettes, Benchmarks, and more can be found on the \href{https://tony-aw.github.io/broadcast/}{website}.
\item GitHub main page: \url{https://github.com/tony-aw/broadcast}
\item Reporting Issues or Giving Suggestions: \url{https://github.com/tony-aw/broadcast/issues} \cr \cr
}
}

\section{Functions}{


\bold{Broadcasted Operators} \cr
Base 'R' comes with relational (==, !=, etc.),
arithmetic (+, -, *, /, etc.), and logical/bit-wise (&, |) operators. \cr
'broadcast' provides 2 ways to use these operators with broadcasting. \cr
\cr
The first (and simple) way is to use the \link{broadcaster} class,
which comes with it's own method dispatch for the above mentioned operators. \cr
This method support operator precedence, and for the average 'R' user,
this is sufficient. \cr
\cr
The second way is to use the large set of \code{bc.}- functions. \cr
These offer much greater control and more operators than the previous method,
and has less risk of running into conflicting methods. \cr
But it does not support operator precedence. \cr
\cr
More information about both methods can be found here: \cr
\link{broadcast_operators}. \cr
\cr

\bold{Binding Arrays} \cr
'broadcast' provides the \link{bind_array} function,
to bind arrays along an arbitrary dimension,
with support for broadcasting. \cr
See \link{bind_array}. \cr\cr

\bold{Casting Functions} \cr
'broadcast' provides several "casting" functions. \cr
These can facility complex forms of broadcasting that would normally not be possible. \cr
But these "casting" functions also have their own merit, beside empowering complex broadcasting. \cr
\cr
More information about the casting functions can be found here: \cr
\link{broadcast_casting}. \cr
\cr

\bold{General Pairwise Broadcasted Functions} \cr
'broadcast' also comes with 2 general pairwise broadcasted functions:
\itemize{
\item \link{bc_ifelse}: Broadcasted version of \link[base]{ifelse}.
\item \link{bcapply}: Broadcasted apply-like function. \cr \cr
}

\bold{Other functions} \cr
'broadcast' provides
\link[=as_bool]{type-casting} functions,
which preserve names and dimensions - convenient for arrays. \cr
\cr
'broadcast' also provides
\link[=sd_lc]{simple linear algebra functions for statistics}. \cr
\cr
And 'broadcast' comes with some helper functions: \cr
\link{bc_dim}, \link{ndim}, \link{lst.ndim}, \link{rep_dim}. \cr \cr
}

\section{Supported Structures}{

'broadcast' supports atomic/recursive arrays (up to 16 dimensions),
and atomic/recursive vectors. \cr
As in standard Linear Algebra convention,
dimensionless vectors are interpreted as column-vectors in broadcasted array operations. \cr
\cr
}

\references{
Harris, C.R., Millman, K.J., van der Walt, S.J. et al. \emph{Array programming with NumPy}. Nature 585, 357–362 (2020). \doi{10.1038/s41586-020-2649-2}. (\href{https://www.nature.com/articles/s41586-020-2649-2}{Publisher link}).
}
\author{
\strong{Author, Maintainer}: Tony Wilkes \email{tony_a_wilkes@outlook.com} (\href{https://orcid.org/0000-0001-9498-8379}{ORCID})
}
